/* prettier - 코드 예쁘게 정리 해주는 것
eslint

props (부모 -> 자식 )
state (해당 컴포넌트 안에서)
1. 클래스형(setState)
2. 함수형(userState) -> hooks */

Dom을 직접적으로 건드려야 할 때
(state로 해결할 수 없는 문제들)
1.특정 Input에 포커스를 주기 위해
2.스크롤 박스 조작을 위해
3.canvas 요소에 그림 그리기 등..

ref사용 방법
1.콜백 함수
2.createRef(v16.3이후)

-

ref 컴포넌트에 달수있다.
-> 내부에 있는 돔을 외부에서 사용할 때

class ref
함수형 컴포넌트 useRef

-

컴포넌트가 업데이트 될 떄
1.prop가 바뀔때
2.state가 바뀔때
3.부모 컴포넌트가 리렌더링 될 때
4.this.forceUpdate로 강제로 렌더링

useEffet
1.렌더링 될 때 마다 실행
2.처음 렌더링 될때만 실행하고 싶을 경우엔 2번째 매개변수에 빈배열을 넣어줌
3.특정한 값이 바뀔때만 실행
componentDidUpdate(preProps.prevState) {
    if(prevProps.value !==this.props.value) {
        ...
    }
}
4.뒷정리(cleanup): 언마운트 되기 전이나 업데이트 되기 직전에 어떤 작업을 수행하고 싶을 떄
언마운트 될때만 하고 싶으면 빈배열을 넣어줌

userReducer: 더 다양한 컴포넌트를 상황에 따라 다양한 상태를 다른 값으로 업데이트 하고 싶을 때 사용

기본 데이터가 있으면 액션(디스패치) 발생시 리듀서에 의해 변경

가장 큰 장점: 컴포넌트 로직을  컴포넌트와 분리 시킬 수 있음

useMemo: 렌더링 하는 과정에서 특정 값이 바뀔때만 연산을 실행

---------

1. 클래스 이름 지을때 고유성에 대한 고민을 덜 하게 됨
2.파일이름_클래스이름_해시값
3. 컴포넌트 간 스타일 오염이 안됨


props를 값으로 연

리렌더링 최소화!
1.props또는state가 변형될 때
2.부모 컴포넌트가 리렌더링 될 때
3.forceUpdate 함수가 실행 될 때

1.React.memo : 컴포넌트의 props가 바뀔때만 리렌더링 한다.
2.onToggle, onRemove 함수가 바뀌지 않게 해준다.(함수형,userReducer)

url파라미터 www.naver.com/resr/rer/erer
쿼리스트링 www.naver.naver/


createContext: context 생성
consumer(소비자): context 데이터 사용
provider(제공자): context 데이터 변경


contextCreate : 만들고
provider: 데이터,함수 제공
hooks(useContext):context를 사용가능하게 해줌





// redux

ducks패턴 -> 액션타입, 액션 생성함수, 리듀서 함수 같이

파일이름 만들 때 컴포넌트(객체) 대문자로

hoc(고차 컴포넌트) : 매개변수에 컴포넌트를 준다.

1. 컨테이너 만들
2. 리듀서(모듈) 만들
3. 리듀서 합쳐주기
4. 스토어 만들 -> 프로바이더 제공
5. connet로 컴포넌트를 리덕스와 연결
6. container 컴포넌트에서 -프레젠테이셔널 컴포넌트로 전달(state, 액션생성 함수)